"history
"=========
1940s machine code level programming  
1950s mnemonic assembly language programming  
      higher level languages - fortran(science), cobol(business), lisp  
1967  Simula object oriented programming
1970s C programming
1990s C++ programming
1995  Java

"compiler overview
"=================
preprocessor - expand include files, expand macros, etc  
compiler - translate source code to target code (machine or assembly)  
assembler - translate assembly to produce relocatable machine code  
linker - resolves external memory address references between object files  
loader - puts all executable object files into memory for execution  

interpreters do not produce target programs, they directly execute code  

binary translation - a compiler that can translate binary code for 
                     one machine into binary code for another

two phases for compilers:  
analysis - tokenizes, imposes grammatical structure, report errors,  
           builds symbol table  
synthesis - builds target program (assembly code)  

character stream -> lexical analyzer (tokenizes) ->  
token stream -> syntax/semantic analyzer (creates tree, error checking) ->  
syntax tree -> intermediate code generator (translates tree into code) ->  
intermediate code -> machine-independent optimizer ->  
intermediate code -> code generator ->  
machine code -> machine-dependent optimizer ->  
optimized machine code  

symbol table holds variable names and types  
the compiler builds and uses the symbol table  

"compiler-construction tools
"===========================
parser generator - given grammatical description of a language, 
                   produce a syntax analyzer  
scanner generator - given a regex description of the tokens of a language,  
                    produce a lexical analyzer  
syntax-directed translation engine - produce routines for walking a tree  
                                     and generating intermediate code  
code generator generator - given rules for translating IL into machine code  
                           produce a code generator  
data flow analysis engine - used for code optimization  
compiler construction toolkits  

"misc
"====
L-value - a variable with an assignable memory location. ex. x
R-value - not an L-value.  ex.  (x + 2) = 7 <- error cannot assign to R-value

static refers to compile time
dynamic refers to run time

"optimization
"============
inline - replace procedure call with the procedure code inline

aho - chapter 2






